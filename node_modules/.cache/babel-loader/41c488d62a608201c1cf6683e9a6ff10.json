{"ast":null,"code":"import store from '../store';\nimport req from '../../utils/req';\nimport { alert } from '../snackbars/actions';\nimport host from '../../config';\nimport urlencode from 'urlencode';\nexport function fetchMyMovies() {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.auth;\n\n    req(host + '/api/movie_statuses.json?&user.id=' + auth.user.id, {\n      useToken: true\n    }).then(function (res) {\n      dispatch(setMyMovies(res));\n    });\n  };\n\n  function setMyMovies(myMovies) {\n    return {\n      type: 'SET_MY_MOVIES',\n      myMovies: myMovies\n    };\n  }\n}\n\nfunction translateGenre(genre) {\n  switch (genre) {\n    case 'science-fiction':\n      return 'sci-fi';\n\n    case 'sports':\n      return 'sport';\n\n    default:\n      return genre;\n  }\n}\n\nexport function exists(code, list) {\n  var set = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var movies = store.getState().search.movies;\n\n  if (!set) {\n    for (var i in movies) {\n      if (movies[i]) {\n        if (movies[i].code === code) return true;\n      }\n    }\n  }\n\n  for (var _i in list) {\n    if (list[_i]) {\n      if (list[_i].code === code) return true;\n    }\n  }\n\n  return false;\n}\nexport function formatMovies(list, callback) {\n  var set = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var movies = [];\n  var movie = {};\n\n  for (var i in list) {\n    if (list[i].images && list[i].images.banner) {\n      movie = {\n        image: list[i].images.poster,\n        title: list[i].title,\n        id: list[i].imdb_id,\n        code: list[i].imdb_id,\n        year: list[i].year,\n        rating: list[i].rating.percentage / 10\n      };\n    } else if (list[i].medium_cover_image) {\n      movie = {\n        image: list[i].medium_cover_image,\n        title: list[i].title,\n        code: list[i].imdb_code,\n        id: list[i].id,\n        year: list[i].year,\n        rating: list[i].rating\n      };\n    }\n\n    if (movie.id && !exists(movie.code, movies, set)) {\n      movies.push(movie);\n    }\n  }\n\n  callback(movies);\n}\nexport function fetchMovies() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    var word = options.word,\n        genre = options.genre,\n        sort = options.sort,\n        api = options.api;\n    var search = getState().search;\n    if (sort === undefined && (word !== undefined || genre !== undefined)) sort = 'title';\n    if (word === undefined) word = search.word;\n    if (genre === undefined) genre = search.genre;\n    if (sort === undefined) sort = search.sort;\n    if (api === undefined) api = search.api;\n    word = queryString.stringify(word, arra);\n    var list = [];\n\n    if (api === 'popcorntime' || api === 'yts') {\n      dispatch(setOptions(word, genre, sort, api));\n    }\n\n    if (api === 'popcorntime') {\n      var url = 'https://tv-v2.api-fetch.website/movies/1?';\n      if (word) url += '&keywords=' + word;\n      if (genre) url += '&genre=' + genre;\n      if (sort) url += '&sort=' + sort;\n      if (sort === 'title') url += '&order=1';\n      dispatch(fetching());\n      req(url).then(function (res) {\n        formatMovies(res, function (movies) {\n          dispatch(setMovies(movies));\n        }, true);\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    } else if (api === 'yts') {\n      var _url = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40';\n      if (word) _url += '&query_term=' + word;\n      if (genre) _url += '&genre=' + translateGenre(genre);\n      if (sort) _url += '&sort_by=' + sort;\n      if (sort === 'title') _url += '&order_by=asc';\n      dispatch(fetching());\n      req(_url).then(function (res) {\n        if (res.data.movies) list = res.data.movies;\n        formatMovies(list, function (movies) {\n          dispatch(setMovies(movies));\n        }, true);\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    }\n  };\n}\nexport function fetchAddMovies() {\n  return function (dispatch, getState) {\n    var list = [];\n    var search = getState().search;\n    if (search.isFetching || search.finished) return;\n\n    if (search.api === 'popcorntime') {\n      var url = 'https://tv-v2.api-fetch.website/movies/' + (search.page + 1) + '?';\n      if (search.word) url += '&keywords=' + search.word;\n      if (search.genre) url += '&genre=' + search.genre;\n      if (search.sort) url += '&sort=' + search.sort;\n      if (search.sort === 'title') url += '&order=1';\n      dispatch(fetching());\n      req(url).then(function (res) {\n        formatMovies(res, function (movies) {\n          dispatch(addMovies(movies));\n        });\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    } else if (search.api === 'yts') {\n      var _url2 = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40&page=' + (search.page + 1);\n\n      if (search.word) _url2 += '&query_term=' + search.word;\n      if (search.genre) _url2 += '&genre=' + translateGenre(search.genre);\n      if (search.sort) _url2 += '&sort_by=' + search.sort;\n      if (search.sort === 'title') _url2 += '&order_by=asc';\n      dispatch(fetching());\n      req(_url2).then(function (res) {\n        if (res.data.movies) list = res.data.movies;\n        formatMovies(list, function (movies) {\n          dispatch(addMovies(movies));\n        });\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    }\n  };\n}\nexport function addMovies(res) {\n  var finished = false;\n  if (res.length === 0) finished = true;\n  return {\n    type: 'ADD_MOVIES',\n    movies: res,\n    finished: finished\n  };\n}\nexport function setMovies(movies) {\n  return {\n    type: 'SET_MOVIES',\n    movies: movies\n  };\n}\nexport function setOptions(word, genre, sort, api) {\n  return {\n    type: 'SET_OPTIONS',\n    word: word,\n    genre: genre,\n    sort: sort,\n    api: api\n  };\n}\nexport function fetching() {\n  return {\n    type: 'SEARCH_FETCHING'\n  };\n}","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/redux/search/actions.js"],"names":["store","req","alert","host","urlencode","fetchMyMovies","dispatch","getState","auth","user","id","useToken","then","res","setMyMovies","myMovies","type","translateGenre","genre","exists","code","list","set","movies","search","i","formatMovies","callback","movie","images","banner","image","poster","title","imdb_id","year","rating","percentage","medium_cover_image","imdb_code","push","fetchMovies","options","word","sort","api","undefined","queryString","stringify","arra","setOptions","url","fetching","setMovies","catch","err","data","fetchAddMovies","isFetching","finished","page","addMovies","length"],"mappings":"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","sourcesContent":["import store from '../store'\nimport req from '../../utils/req'\nimport { alert } from '../snackbars/actions'\nimport host from '../../config'\nimport urlencode from 'urlencode'\n\nexport function fetchMyMovies() {\n  return (dispatch, getState) => {\n    const { auth } = getState()\n    req(host + '/api/movie_statuses.json?&user.id=' + auth.user.id, {\n      useToken: true\n    }).then(res => {\n      dispatch(setMyMovies(res))\n    })\n  }\n  function setMyMovies(myMovies) {\n    return {\n      type: 'SET_MY_MOVIES',\n      myMovies: myMovies\n    }\n  }\n}\n\nfunction translateGenre(genre) {\n  switch(genre) {\n    case 'science-fiction':\n      return 'sci-fi'\n    case 'sports':\n      return 'sport'\n    default:\n      return genre\n  }\n}\n\nexport function exists(code, list, set = false) {\n  const { movies } = store.getState().search\n  if (!set) {\n    for (let i in movies) {\n      if (movies[i]) {\n        if (movies[i].code === code)\n          return true\n      }\n    }\n  }\n  for (let i in list) {\n    if (list[i]) {\n      if (list[i].code === code)\n        return true\n    }\n  }\n  return false\n}\n\nexport function formatMovies(list, callback, set = false) {\n  let movies = []\n  let movie = {}\n\n  for(let i in list) {\n    if (list[i].images && list[i].images.banner) {\n      movie = {\n        image: list[i].images.poster,\n        title: list[i].title,\n        id: list[i].imdb_id,\n        code: list[i].imdb_id,\n        year: list[i].year,\n        rating: list[i].rating.percentage / 10,\n      }\n    } else if (list[i].medium_cover_image) {\n      movie = {\n        image: list[i].medium_cover_image,\n        title: list[i].title,\n        code: list[i].imdb_code,\n        id: list[i].id,\n        year: list[i].year,\n        rating: list[i].rating,\n      }\n    }\n    if (movie.id && !exists(movie.code, movies, set)) {\n      movies.push(movie)\n    }\n  }\n  callback(movies)\n}\n\nexport function fetchMovies(options = {}) {\n  return (dispatch, getState) => {\n\n    let { word, genre, sort, api } = options\n    let search = getState().search\n    if (sort === undefined && (word !== undefined || genre !== undefined)) sort = 'title'\n    if (word === undefined) word = search.word\n    if (genre === undefined) genre = search.genre\n    if (sort === undefined) sort = search.sort\n    if (api === undefined) api = search.api\n    word = queryString.stringify(word, arra)\n    let list = []\n\n    if (api === 'popcorntime' || api === 'yts') {\n      dispatch(setOptions(word, genre, sort, api))\n    }\n    if (api === 'popcorntime') {\n      let url = 'https://tv-v2.api-fetch.website/movies/1?'\n      if (word) url += '&keywords=' + word\n      if (genre) url += '&genre=' + genre\n      if (sort) url += '&sort=' + sort\n      if (sort === 'title') url += '&order=1'\n      dispatch(fetching())\n      req(url).then(res => {\n        formatMovies(res, (movies) => {\n          dispatch(setMovies(movies))\n        }, true)\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    } else if (api === 'yts') {\n      let url = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40'\n      if (word) url += '&query_term=' + word\n      if (genre) url += '&genre=' + translateGenre(genre)\n      if (sort) url += '&sort_by=' + sort\n      if (sort === 'title') url += '&order_by=asc'\n      dispatch(fetching())\n      req(url).then(res => {\n        if (res.data.movies)\n          list = res.data.movies\n        formatMovies(list, (movies) => {\n          dispatch(setMovies(movies))\n        }, true)\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    }\n  }\n}\n\nexport function fetchAddMovies() {\n  return (dispatch, getState) => {\n    let list = []\n    let search = getState().search\n    if (search.isFetching || search.finished) return\n\n    if (search.api === 'popcorntime') {\n      let url = 'https://tv-v2.api-fetch.website/movies/' + (search.page + 1) + '?'\n      if (search.word) url += '&keywords=' + search.word\n      if (search.genre) url += '&genre=' + search.genre\n      if (search.sort) url += '&sort=' + search.sort\n      if (search.sort === 'title') url += '&order=1'\n      dispatch(fetching())\n      req(url).then(res => {\n        formatMovies(res, (movies) => {\n          dispatch(addMovies(movies))\n        })\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    } else if (search.api === 'yts') {\n      let url = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40&page=' + (search.page + 1)\n      if (search.word) url += '&query_term=' + search.word\n      if (search.genre) url += '&genre=' + translateGenre(search.genre)\n      if (search.sort) url += '&sort_by=' + search.sort\n      if (search.sort === 'title') url += '&order_by=asc'\n      dispatch(fetching())\n      req(url).then(res => {\n        if (res.data.movies)\n          list = res.data.movies\n        formatMovies(list, (movies) => {\n          dispatch(addMovies(movies))\n        })\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    }\n  }\n}\n\nexport function addMovies(res) {\n  let finished = false\n  if (res.length === 0)\n    finished = true\n  return {\n    type: 'ADD_MOVIES',\n    movies: res,\n    finished: finished\n  }\n}\n\nexport function setMovies(movies) {\n  return {\n    type: 'SET_MOVIES',\n    movies: movies,\n  }\n}\n\nexport function setOptions(word, genre, sort, api) {\n  return {\n    type: 'SET_OPTIONS',\n    word: word,\n    genre: genre,\n    sort: sort,\n    api: api,\n  }\n}\n\nexport function fetching() {\n  return {\n    type: 'SEARCH_FETCHING'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
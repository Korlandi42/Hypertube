{"ast":null,"code":"import { alert } from '../snackbars/actions';\nimport req from '../../utils/req';\nimport Cookies from 'js-cookie';\nimport host from '../../config';\nexport function login(data, callback) {\n  data.email = data.username;\n  var auth = {};\n  return function (dispatch, getState) {\n    var isFetching = getState().auth.isFetching;\n\n    if (!isFetching) {\n      dispatch(fetching(true));\n      req(host + '/api/login_check', {\n        method: 'post',\n        body: data\n      }).then(function (res) {\n        auth.token = res.token;\n        Cookies.set('jwt', auth.token);\n        dispatch(getCurrentUser());\n        dispatch(alert('LOGIN_SUCCESS', 'success'));\n        if (callback) callback();\n      }).catch(function (err) {\n        console.log('ERRR', err);\n        dispatch(fetching(false));\n\n        if (err._status === 401) {\n          dispatch(alert('LOGIN_ERROR', 'error'));\n        }\n      });\n    }\n  };\n}\nexport function fetching(state) {\n  return {\n    type: 'AUTH_FETCHING',\n    state: state\n  };\n}\nexport function logout() {\n  Cookies.remove('jwt');\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function getCurrentUser() {\n  return function (dispatch) {\n    if (Cookies.get('jwt')) {\n      req(host + '/api/users/me', {\n        useToken: true\n      }).then(function (res) {\n        var id = res['@id'].split('id=');\n        res.id = id[1];\n        dispatch(setCurrentUser(res));\n      }).catch(function (err) {\n        dispatch(logout());\n      });\n    } else {\n      dispatch(setCurrentUser());\n    }\n  };\n\n  function setCurrentUser(user) {\n    return {\n      type: 'SET_CURRENT_USER',\n      user: user,\n      logged: user ? true : false\n    };\n  }\n}","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/redux/auth/actions.js"],"names":["alert","req","Cookies","host","login","data","callback","email","username","auth","dispatch","getState","isFetching","fetching","method","body","then","res","token","set","getCurrentUser","catch","err","console","log","_status","state","type","logout","remove","get","useToken","id","split","setCurrentUser","user","logged"],"mappings":"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","sourcesContent":["import { alert } from '../snackbars/actions'\nimport req from '../../utils/req'\nimport Cookies from 'js-cookie'\nimport host from '../../config'\n\nexport function login(data, callback) {\n\n  data.email = data.username\n  let auth = {}\n\n  return (dispatch, getState) => {\n    const { isFetching } = getState().auth\n    if (!isFetching) {\n      dispatch(fetching(true))\n      req(host + '/api/login_check', {\n        method: 'post', body: data\n      })\n      .then(res => {\n        auth.token = res.token\n        Cookies.set('jwt', auth.token)\n        dispatch(getCurrentUser())\n        dispatch(alert('LOGIN_SUCCESS', 'success'))\n        if (callback) callback()\n      })\n      .catch(err => {\n        console.log('ERRR', err)\n        dispatch(fetching(false))\n        if (err._status === 401) {\n          dispatch(alert('LOGIN_ERROR', 'error'))\n        }\n      })\n    }\n  }\n}\n\nexport function fetching(state) {\n  return {\n    type: 'AUTH_FETCHING',\n    state: state\n  }\n}\n\nexport function logout() {\n  Cookies.remove('jwt')\n  return {\n    type: 'LOGOUT'\n  }\n}\n\nexport function getCurrentUser() {\n  return (dispatch) => {\n    if (Cookies.get('jwt')) {\n      req(host + '/api/users/me', {useToken: true})\n      .then(res => {\n        let id = res['@id'].split('id=')\n        res.id = id[1]\n        dispatch(setCurrentUser(res))\n      })\n      .catch(err => {\n        dispatch(logout())\n      })\n    } else {\n      dispatch(setCurrentUser())\n    }\n  }\n\n  function setCurrentUser(user) {\n    return {\n      type: 'SET_CURRENT_USER',\n      user: user,\n      logged: user ? true : false,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
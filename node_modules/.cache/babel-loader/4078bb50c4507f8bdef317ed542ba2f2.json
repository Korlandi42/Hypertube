{"ast":null,"code":"import _objectSpread from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport store from '../redux/store';\nimport { enqueueSnackbar } from '../redux/snackbars/actions';\nimport Cookies from 'js-cookie';\n\nvar req = function req(url, options) {\n  var params = {\n    headers: {} // options\n\n  };\n\n  if (options) {\n    // method\n    if (options.method) params.method = options.method; // content type\n\n    if (options.contentType) params.headers = {\n      'Content-Type': options.contentType\n    };else if (options.contentType === false) ;else if (options.body) params.headers = {\n      'Content-Type': 'application/json' // body\n\n    };\n    if (options.body) params.body = params.headers['Content-Type'] === 'application/json' ? JSON.stringify(options.body) : options.body; // token\n\n    if (options.useToken) params.headers = _objectSpread({}, params.headers, {\n      Authorization: 'Bearer ' + Cookies.get('jwt')\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    fetch(url, params).then(function (response) {\n      if (response.ok) {\n        response.json().then(function (json) {\n          json._status = response.status;\n          resolve(json);\n        });\n      } else {\n        if (response.status >= 500) store.dispatch(enqueueSnackbar(response.statusText, 'error'));\n        reject(response);\n      }\n    }).catch(function (err) {\n      store.dispatch(enqueueSnackbar(err.message, 'error'));\n      reject(err);\n    });\n  });\n};\n\nexport default req;","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/utils/req.js"],"names":["store","enqueueSnackbar","Cookies","req","url","options","params","headers","method","contentType","body","JSON","stringify","useToken","Authorization","get","Promise","resolve","reject","fetch","then","response","ok","json","_status","status","dispatch","statusText","catch","err","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAC5B,MAAIC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE,EADE,CAGb;;AAHa,GAAb;;AAIA,MAAIF,OAAJ,EAAa;AACX;AACA,QAAIA,OAAO,CAACG,MAAZ,EAAoBF,MAAM,CAACE,MAAP,GAAgBH,OAAO,CAACG,MAAxB,CAFT,CAGX;;AACA,QAAIH,OAAO,CAACI,WAAZ,EAAyBH,MAAM,CAACC,OAAP,GAAiB;AAAC,sBAAgBF,OAAO,CAACI;AAAzB,KAAjB,CAAzB,KACK,IAAIJ,OAAO,CAACI,WAAR,KAAwB,KAA5B,EAAmC,CAAnC,KACA,IAAIJ,OAAO,CAACK,IAAZ,EAAkBJ,MAAM,CAACC,OAAP,GAAiB;AAAC,sBAAgB,kBAAjB,CACxC;;AADwC,KAAjB;AAEvB,QAAIF,OAAO,CAACK,IAAZ,EACEJ,MAAM,CAACI,IAAP,GAAcJ,MAAM,CAACC,OAAP,CAAe,cAAf,MAAmC,kBAAnC,GAAwDI,IAAI,CAACC,SAAL,CAAeP,OAAO,CAACK,IAAvB,CAAxD,GAAuFL,OAAO,CAACK,IAA7G,CATS,CAUX;;AACA,QAAIL,OAAO,CAACQ,QAAZ,EACEP,MAAM,CAACC,OAAP,qBAAqBD,MAAM,CAACC,OAA5B;AAAqCO,MAAAA,aAAa,EAAE,YAAYZ,OAAO,CAACa,GAAR,CAAY,KAAZ;AAAhE;AACH;;AACD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,KAAK,CAACf,GAAD,EAAME,MAAN,CAAL,CACCc,IADD,CACM,UAAAC,QAAQ,EAAI;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACfD,QAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqB,UAAAG,IAAI,EAAI;AAC3BA,UAAAA,IAAI,CAACC,OAAL,GAAeH,QAAQ,CAACI,MAAxB;AACAR,UAAAA,OAAO,CAACM,IAAD,CAAP;AACD,SAHD;AAID,OALD,MAKO;AACL,YAAIF,QAAQ,CAACI,MAAT,IAAmB,GAAvB,EACEzB,KAAK,CAAC0B,QAAN,CAAezB,eAAe,CAACoB,QAAQ,CAACM,UAAV,EAAsB,OAAtB,CAA9B;AACFT,QAAAA,MAAM,CAACG,QAAD,CAAN;AACD;AACF,KAZD,EAaCO,KAbD,CAaO,UAAAC,GAAG,EAAI;AACZ7B,MAAAA,KAAK,CAAC0B,QAAN,CAAezB,eAAe,CAAC4B,GAAG,CAACC,OAAL,EAAc,OAAd,CAA9B;AACAZ,MAAAA,MAAM,CAACW,GAAD,CAAN;AACD,KAhBD;AAiBD,GAlBM,CAAP;AAmBD,CAtCD;;AAwCA,eAAe1B,GAAf","sourcesContent":["import store from '../redux/store'\nimport { enqueueSnackbar } from '../redux/snackbars/actions'\nimport Cookies from 'js-cookie'\n\nconst req = (url, options) => {\n  let params = {\n    headers: {}\n  }\n  // options\n  if (options) {\n    // method\n    if (options.method) params.method = options.method\n    // content type\n    if (options.contentType) params.headers = {'Content-Type': options.contentType}\n    else if (options.contentType === false) ;\n    else if (options.body) params.headers = {'Content-Type': 'application/json'}\n    // body\n    if (options.body)\n      params.body = params.headers['Content-Type'] === 'application/json' ? JSON.stringify(options.body) : options.body\n    // token\n    if (options.useToken)\n      params.headers = {...params.headers, Authorization: 'Bearer ' + Cookies.get('jwt')}\n  }\n  return new Promise((resolve, reject) => {\n    fetch(url, params)\n    .then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          json._status = response.status\n          resolve(json)\n        })\n      } else {\n        if (response.status >= 500)\n          store.dispatch(enqueueSnackbar(response.statusText, 'error'))\n        reject(response)\n      }\n    })\n    .catch(err => {\n      store.dispatch(enqueueSnackbar(err.message, 'error'))\n      reject(err)\n    })\n  })\n}\n\nexport default req\n"]},"metadata":{},"sourceType":"module"}
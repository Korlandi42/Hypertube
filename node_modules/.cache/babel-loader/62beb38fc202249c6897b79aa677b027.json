{"ast":null,"code":"import store from '../store';\nimport req from '../../utils/req';\nimport { alert } from '../snackbars/actions';\n\nfunction translateGenre(genre) {\n  switch (genre) {\n    case 'science-fiction':\n      return 'sci-fi';\n\n    case 'sports':\n      return 'sport';\n\n    default:\n      return genre;\n  }\n}\n\nexport function exists(code, list) {\n  var set = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var movies = store.getState().search.movies;\n\n  if (!set) {\n    for (var i in movies) {\n      if (movies[i]) {\n        if (movies[i].code === code) return true;\n      }\n    }\n  }\n\n  for (var _i in list) {\n    if (list[_i]) {\n      if (list[_i].code === code) return true;\n    }\n  }\n\n  return false;\n}\nexport function formatMovies(list, callback) {\n  var set = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var movies = [];\n  var movie = {};\n\n  for (var i in list) {\n    if (list[i].images && list[i].images.banner) {\n      movie = {\n        image: list[i].images.poster,\n        title: list[i].title,\n        id: list[i].imdb_id,\n        code: list[i].imdb_id,\n        year: list[i].year,\n        rating: list[i].rating.percentage / 10\n      };\n    } else if (list[i].medium_cover_image) {\n      movie = {\n        image: list[i].medium_cover_image,\n        title: list[i].title,\n        code: list[i].imdb_code,\n        id: list[i].id,\n        year: list[i].year,\n        rating: list[i].rating\n      };\n    }\n\n    if (movie.id && !exists(movie.code, movies, set)) {\n      movies.push(movie);\n    }\n  }\n\n  callback(movies);\n}\nexport function fetchMovies() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    var word = options.word,\n        genre = options.genre,\n        sort = options.sort,\n        api = options.api;\n    var search = getState().search;\n    if (sort === undefined && (word !== undefined || genre !== undefined)) sort = 'title';\n    if (word === undefined) word = search.word;\n    if (genre === undefined) genre = search.genre;\n    if (sort === undefined) sort = search.sort;\n    if (api === undefined) api = search.api;\n    var list = [];\n\n    if (api === 'popcorntime' || api === 'yts') {\n      dispatch(setOptions(word, genre, sort, api));\n    }\n\n    if (api === 'popcorntime') {\n      var url = 'https://tv-v2.api-fetch.website/movies/1?';\n      if (word) url += '&keywords=' + word;\n      if (genre) url += '&genre=' + genre;\n      if (sort) url += '&sort=' + sort;\n      if (sort === 'title') url += '&order=1';\n      dispatch(fetching());\n      req(url).then(function (res) {\n        console.log(res);\n        formatMovies(res, function (movies) {\n          dispatch(setMovies(movies));\n        }, true);\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    } else if (api === 'yts') {\n      var _url = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40';\n      if (word) _url += '&query_term=' + word;\n      if (genre) _url += '&genre=' + translateGenre(genre);\n      if (sort) _url += '&sort_by=' + sort;\n      if (sort === 'title') _url += '&order_by=asc';\n      dispatch(fetching());\n      req(_url).then(function (res) {\n        if (res.data.movies) list = res.data.movies;\n        formatMovies(list, function (movies) {\n          dispatch(setMovies(movies));\n        }, true);\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    }\n  };\n}\nexport function fetchAddMovies() {\n  return function (dispatch, getState) {\n    var list = [];\n    var search = getState().search;\n    if (search.isFetching || search.finished) return;\n\n    if (search.api === 'popcorntime') {\n      var url = 'https://tv-v2.api-fetch.website/movies/' + (search.page + 1) + '?';\n      if (search.word) url += '&keywords=' + search.word;\n      if (search.genre) url += '&genre=' + search.genre;\n      if (search.sort) url += '&sort=' + search.sort;\n      if (search.sort === 'title') url += '&order=1';\n      dispatch(fetching());\n      req(url).then(function (res) {\n        formatMovies(res, function (movies) {\n          dispatch(addMovies(movies));\n        });\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    } else if (search.api === 'yts') {\n      var _url2 = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40&page=' + (search.page + 1);\n\n      if (search.word) _url2 += '&query_term=' + search.word;\n      if (search.genre) _url2 += '&genre=' + translateGenre(search.genre);\n      if (search.sort) _url2 += '&sort_by=' + search.sort;\n      if (search.sort === 'title') _url2 += '&order_by=asc';\n      dispatch(fetching());\n      req(_url2).then(function (res) {\n        if (res.data.movies) list = res.data.movies;\n        formatMovies(list, function (movies) {\n          dispatch(addMovies(movies));\n        });\n      }).catch(function (err) {\n        dispatch(alert('API_ERROR', 'error'));\n      });\n    }\n  };\n}\nexport function addMovies(res) {\n  var finished = false;\n  if (res.length === 0) finished = true;\n  return {\n    type: 'ADD_MOVIES',\n    movies: res,\n    finished: finished\n  };\n}\nexport function setMovies(movies) {\n  return {\n    type: 'SET_MOVIES',\n    movies: movies\n  };\n}\nexport function setOptions(word, genre, sort, api) {\n  return {\n    type: 'SET_OPTIONS',\n    word: word,\n    genre: genre,\n    sort: sort,\n    api: api\n  };\n}\nexport function fetching() {\n  return {\n    type: 'SEARCH_FETCHING'\n  };\n}","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/redux/search/actions.js"],"names":["store","req","alert","translateGenre","genre","exists","code","list","set","movies","getState","search","i","formatMovies","callback","movie","images","banner","image","poster","title","id","imdb_id","year","rating","percentage","medium_cover_image","imdb_code","push","fetchMovies","options","dispatch","word","sort","api","undefined","setOptions","url","fetching","then","res","console","log","setMovies","catch","err","data","fetchAddMovies","isFetching","finished","page","addMovies","length","type"],"mappings":"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","sourcesContent":["import store from '../store'\nimport req from '../../utils/req'\nimport { alert } from '../snackbars/actions'\n\nfunction translateGenre(genre) {\n  switch(genre) {\n    case 'science-fiction':\n      return 'sci-fi'\n    case 'sports':\n      return 'sport'\n    default:\n      return genre\n  }\n}\n\nexport function exists(code, list, set = false) {\n  const { movies } = store.getState().search\n  if (!set) {\n    for (let i in movies) {\n      if (movies[i]) {\n        if (movies[i].code === code)\n          return true\n      }\n    }\n  }\n  for (let i in list) {\n    if (list[i]) {\n      if (list[i].code === code)\n        return true\n    }\n  }\n  return false\n}\n\nexport function formatMovies(list, callback, set = false) {\n  let movies = []\n  let movie = {}\n\n  for(let i in list) {\n    if (list[i].images && list[i].images.banner) {\n      movie = {\n        image: list[i].images.poster,\n        title: list[i].title,\n        id: list[i].imdb_id,\n        code: list[i].imdb_id,\n        year: list[i].year,\n        rating: list[i].rating.percentage / 10,\n      }\n    } else if (list[i].medium_cover_image) {\n      movie = {\n        image: list[i].medium_cover_image,\n        title: list[i].title,\n        code: list[i].imdb_code,\n        id: list[i].id,\n        year: list[i].year,\n        rating: list[i].rating,\n      }\n    }\n    if (movie.id && !exists(movie.code, movies, set)) {\n      movies.push(movie)\n    }\n  }\n  callback(movies)\n}\n\nexport function fetchMovies(options = {}) {\n  return (dispatch, getState) => {\n\n    let { word, genre, sort, api } = options\n    let search = getState().search\n    if (sort === undefined && (word !== undefined || genre !== undefined)) sort = 'title'\n    if (word === undefined) word = search.word\n    if (genre === undefined) genre = search.genre\n    if (sort === undefined) sort = search.sort\n    if (api === undefined) api = search.api\n    let list = []\n\n    if (api === 'popcorntime' || api === 'yts') {\n      dispatch(setOptions(word, genre, sort, api))\n    }\n    if (api === 'popcorntime') {\n      let url = 'https://tv-v2.api-fetch.website/movies/1?'\n      if (word) url += '&keywords=' + word\n      if (genre) url += '&genre=' + genre\n      if (sort) url += '&sort=' + sort\n      if (sort === 'title') url += '&order=1'\n      dispatch(fetching())\n      req(url).then(res => {\n        console.log(res)\n        formatMovies(res, (movies) => {\n          dispatch(setMovies(movies))\n        }, true)\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    } else if (api === 'yts') {\n      let url = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40'\n      if (word) url += '&query_term=' + word\n      if (genre) url += '&genre=' + translateGenre(genre)\n      if (sort) url += '&sort_by=' + sort\n      if (sort === 'title') url += '&order_by=asc'\n      dispatch(fetching())\n      req(url).then(res => {\n        if (res.data.movies)\n          list = res.data.movies\n        formatMovies(list, (movies) => {\n          dispatch(setMovies(movies))\n        }, true)\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    }\n  }\n}\n\nexport function fetchAddMovies() {\n  return (dispatch, getState) => {\n    let list = []\n    let search = getState().search\n    if (search.isFetching || search.finished) return\n\n    if (search.api === 'popcorntime') {\n      let url = 'https://tv-v2.api-fetch.website/movies/' + (search.page + 1) + '?'\n      if (search.word) url += '&keywords=' + search.word\n      if (search.genre) url += '&genre=' + search.genre\n      if (search.sort) url += '&sort=' + search.sort\n      if (search.sort === 'title') url += '&order=1'\n      dispatch(fetching())\n      req(url).then(res => {\n        formatMovies(res, (movies) => {\n          dispatch(addMovies(movies))\n        })\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    } else if (search.api === 'yts') {\n      let url = 'https://yts.am/api/v2/list_movies.json?sort_by=like_count&limit=40&page=' + (search.page + 1)\n      if (search.word) url += '&query_term=' + search.word\n      if (search.genre) url += '&genre=' + translateGenre(search.genre)\n      if (search.sort) url += '&sort_by=' + search.sort\n      if (search.sort === 'title') url += '&order_by=asc'\n      dispatch(fetching())\n      req(url).then(res => {\n        if (res.data.movies)\n          list = res.data.movies\n        formatMovies(list, (movies) => {\n          dispatch(addMovies(movies))\n        })\n      }).catch(err => {\n        dispatch(alert('API_ERROR', 'error'))\n      })\n    }\n  }\n}\n\nexport function addMovies(res) {\n  let finished = false\n  if (res.length === 0)\n    finished = true\n  return {\n    type: 'ADD_MOVIES',\n    movies: res,\n    finished: finished\n  }\n}\n\nexport function setMovies(movies) {\n  return {\n    type: 'SET_MOVIES',\n    movies: movies,\n  }\n}\n\nexport function setOptions(word, genre, sort, api) {\n  return {\n    type: 'SET_OPTIONS',\n    word: word,\n    genre: genre,\n    sort: sort,\n    api: api,\n  }\n}\n\nexport function fetching() {\n  return {\n    type: 'SEARCH_FETCHING'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
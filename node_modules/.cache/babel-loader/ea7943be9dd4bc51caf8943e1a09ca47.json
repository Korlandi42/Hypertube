{"ast":null,"code":"import _objectSpread from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/korlandi/42/hypertube/src/components/player/Player.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport host from '../../config';\n/**\n * Component takes 2 props =>\n *    onChange -> Method called to update video time in db.\n *    startTime -> Time in seconds where the video should start.\n *    mediaUrl -> Link of the video to read.\n *    movieId -> ID of the movie reading, in order to set subtitles.\n */\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Player)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this._isMounted = false;\n\n    _this.setStateCheck = function (state, callback) {\n      if (_this._isMounted === true) {\n        _this.setState(state, function () {\n          if (callback) callback();\n        });\n      }\n    };\n\n    _this.state = {\n      oldTime: 0,\n      currentTime: 0,\n      subtitles: {\n        fre: null,\n        eng: null\n      }\n    };\n    _this.enableEvent = false;\n    _this.player = null;\n\n    _this.componentDidMount = function () {\n      var startTime = _this.props.startTime;\n      _this.player = document.getElementById(\"player\");\n      if (_this.player.currentTime < startTime) _this.player.currentTime = startTime;\n      document.addEventListener('keydown', _this.handleKeyPress);\n\n      _this.fetchSubtitles();\n    };\n\n    _this.handleTimeChange = function (e) {\n      _this.setStateCheck({\n        currentTime: e.target.currentTime\n      }, function () {\n        var _this$state = _this.state,\n            currentTime = _this$state.currentTime,\n            oldTime = _this$state.oldTime;\n\n        if (Math.abs(currentTime - oldTime) > 5 && _this.props.onChange) {\n          _this.setStateCheck({\n            oldTime: currentTime\n          });\n\n          _this.props.onChange(currentTime);\n        }\n      });\n    };\n\n    _this.fetchSubtitles = function () {\n      var redo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var movieId = _this.props.movieId;\n      var _this$state$subtitles = _this.state.subtitles,\n          fre = _this$state$subtitles.fre,\n          eng = _this$state$subtitles.eng;\n      fetch(host + '/api/movies/subtitles/' + movieId + '/eng').then(function (res) {\n        _this.setStateCheck(_objectSpread({}, _this.state, {\n          subtitles: _objectSpread({}, _this.state.subtitles, {\n            eng: res.status === 200\n          })\n        }));\n      }).catch(function (ignored) {});\n      fetch(host + '/api/movies/subtitles/' + movieId + '/fre').then(function (res) {\n        _this.setStateCheck(_objectSpread({}, _this.state, {\n          subtitles: _objectSpread({}, _this.state.subtitles, {\n            fre: res.status === 200\n          })\n        }));\n      }).catch(function (ignored) {});\n\n      if (!fre && !eng && redo) {\n        setTimeout(function () {\n          return _this.fetchSubtitles(false);\n        }, 2500);\n      }\n    };\n\n    _this.handleKeyPress = function (e) {\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          player = _assertThisInitialize.player;\n\n      if (!_this.enableEvent || !_this.player) return;\n      if (document.activeElement.tagName === \"INPUT\") return;\n      var needsPrevent = true;\n\n      switch (e.key) {\n        case \" \":\n          player.paused ? player.play() : player.pause();\n          break;\n\n        case \"ArrowRight\":\n          player.currentTime += 10;\n          break;\n\n        case \"ArrowLeft\":\n          player.currentTime -= 10;\n          break;\n\n        case \"ArrowUp\":\n          player.volume > .9 ? player.volume = 1 : player.volume += .1;\n          break;\n\n        case \"ArrowDown\":\n          player.volume < .1 ? player.volume = 0 : player.volume -= .1;\n          break;\n\n        default:\n          needsPrevent = false;\n      }\n\n      if (needsPrevent) e.preventDefault();\n    };\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mediaUrl = _this$props.mediaUrl,\n          movieId = _this$props.movieId,\n          locales = _this$props.locales;\n      var _this$state$subtitles2 = this.state.subtitles,\n          fre = _this$state$subtitles2.fre,\n          eng = _this$state$subtitles2.eng;\n      if (!mediaUrl) return null;\n      return React.createElement(\"video\", {\n        id: \"player\",\n        controls: true,\n        style: {\n          width: '100%'\n        },\n        onTimeUpdate: this.handleTimeChange,\n        onMouseEnter: function onMouseEnter() {\n          return _this2.enableEvent = true;\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.enableEvent = false;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        src: mediaUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), eng && React.createElement(\"track\", {\n        label: \"English\",\n        kind: \"subtitles\",\n        srcLang: \"en\",\n        src: host + '/api/movies/subtitles/' + movieId + '/eng',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), fre && React.createElement(\"track\", {\n        label: \"Fran\\xE7ais\",\n        kind: \"subtitles\",\n        srcLang: \"fr\",\n        src: host + '/api/movies/subtitles/' + movieId + '/fre',\n        default: locales.code === \"fr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps)(Player);","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/components/player/Player.jsx"],"names":["React","Component","connect","host","Player","_isMounted","setStateCheck","state","callback","setState","oldTime","currentTime","subtitles","fre","eng","enableEvent","player","componentDidMount","startTime","props","document","getElementById","addEventListener","handleKeyPress","fetchSubtitles","handleTimeChange","e","target","Math","abs","onChange","redo","movieId","fetch","then","res","status","catch","ignored","setTimeout","activeElement","tagName","needsPrevent","key","paused","play","pause","volume","preventDefault","mediaUrl","locales","width","code","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport host from '../../config'\n\n/**\n * Component takes 2 props =>\n *    onChange -> Method called to update video time in db.\n *    startTime -> Time in seconds where the video should start.\n *    mediaUrl -> Link of the video to read.\n *    movieId -> ID of the movie reading, in order to set subtitles.\n */\nclass Player extends Component {\n\n  _isMounted = false\n  setStateCheck = (state, callback) => {\n    if (this._isMounted === true) {\n      this.setState(state, () => {\n        if (callback) callback()\n      })\n    }\n  }\n\n  state = {\n    oldTime: 0,\n    currentTime: 0,\n    subtitles: {\n      fre: null,\n      eng: null\n    }\n  }\n\n  enableEvent = false\n  player = null\n\n  componentDidMount = () => {\n    let { startTime } = this.props;\n    this.player = document.getElementById(\"player\");\n    if (this.player.currentTime < startTime)\n      this.player.currentTime = startTime;\n    document.addEventListener('keydown', this.handleKeyPress)\n    this.fetchSubtitles()\n  }\n\n  handleTimeChange = e => {\n    this.setStateCheck({\n      currentTime: e.target.currentTime,\n    }, () => {\n      let { currentTime, oldTime } = this.state;\n      if (Math.abs(currentTime - oldTime) > 5 && this.props.onChange) {\n        this.setStateCheck({ oldTime: currentTime });\n        this.props.onChange(currentTime);\n      }\n    })\n  }\n\n  fetchSubtitles = (redo = true) => {\n    const { movieId } = this.props\n    const { fre, eng } = this.state.subtitles\n    fetch(host + '/api/movies/subtitles/' + movieId + '/eng')\n    .then(res => {\n      this.setStateCheck({\n        ...this.state,\n        subtitles: {\n          ...this.state.subtitles,\n          eng: res.status === 200\n        }\n      })\n    })\n    .catch(ignored => {})\n    fetch(host + '/api/movies/subtitles/' + movieId + '/fre')\n    .then(res => {\n      this.setStateCheck({\n        ...this.state,\n        subtitles: {\n          ...this.state.subtitles,\n          fre: res.status === 200\n        }\n      })\n    })\n    .catch(ignored => {})\n    if (!fre && !eng && redo) {\n      setTimeout(() => this.fetchSubtitles(false), 2500);\n    }\n  }\n\n  handleKeyPress = e => {\n    const { player } = this\n    if (!this.enableEvent || !this.player) return\n    if (document.activeElement.tagName === \"INPUT\") return\n    let needsPrevent = true\n    switch (e.key) {\n      case \" \":\n        player.paused ? player.play() : player.pause()\n        break\n      case \"ArrowRight\":\n        player.currentTime += 10\n        break\n      case \"ArrowLeft\":\n        player.currentTime -= 10\n        break\n      case \"ArrowUp\":\n        player.volume > .9 ? player.volume = 1 : player.volume += .1\n        break\n      case \"ArrowDown\":\n        player.volume < .1 ? player.volume = 0 : player.volume -= .1\n        break\n      default:\n        needsPrevent = false\n    }\n    if (needsPrevent) e.preventDefault()\n  }\n\n  componentWillMount() {\n    this._isMounted = true\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n\n  render() {\n    const { mediaUrl, movieId, locales } = this.props\n    const { fre, eng } = this.state.subtitles\n    if (!mediaUrl) return null\n    return (\n      <video id=\"player\" controls style={{width: '100%'}}\n          onTimeUpdate={this.handleTimeChange}\n          onMouseEnter={() => this.enableEvent = true}\n          onMouseLeave={() => this.enableEvent = false}>\n        <source src={mediaUrl} />\n        {eng && <track label=\"English\" kind=\"subtitles\" srcLang=\"en\" src={host + '/api/movies/subtitles/' + movieId + '/eng'} />}\n        {fre && <track label=\"Français\" kind=\"subtitles\" srcLang=\"fr\" src={host + '/api/movies/subtitles/' + movieId + '/fre'} default={locales.code === \"fr\"}/>}\n      </video>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => { return state }\n\nexport default connect(mapStateToProps)(Player)\n"]},"metadata":{},"sourceType":"module"}
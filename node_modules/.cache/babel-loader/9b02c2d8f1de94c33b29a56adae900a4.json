{"ast":null,"code":"import _objectSpread from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/korlandi/42/hypertube/src/components/stream/Stream.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport req from '../../utils/req';\nimport { Typography } from '@material-ui/core';\nimport host from '../../config';\nimport Player from '../player/Player';\nimport Comments from '../comments/Comments';\n\nvar Stream =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stream, _Component);\n\n  function Stream() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stream);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stream)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isFetching: false,\n      startTime: undefined,\n      statusId: -1,\n      name: ''\n    };\n\n    _this.fetchStream = function (id) {\n      _this.setState(_objectSpread({}, _this.state, {\n        isFetching: true\n      }));\n\n      var userId = _this.props.auth.user.id;\n      req(host + '/api/movie_statuses.json?movie.id=' + id + \"&user.id=\" + userId, {\n        useToken: true\n      }).then(function (res) {\n        if (res.length === 1) {\n          console.log(res.movie);\n\n          _this.setState({\n            isFetching: false,\n            startTime: res[0].time,\n            statusId: res[0].id,\n            name: res.movie.name\n          });\n        } else {\n          req(host + '/api/movie_statuses', {\n            method: 'POST',\n            body: {\n              time: 0,\n              user: '/api/users/' + userId,\n              movie: '/api/movies/' + id\n            },\n            useToken: true\n          }).then(function (res) {\n            _this.setState({\n              isFetching: false,\n              startTime: 0,\n              statusId: res.id\n            });\n          }).catch(function (err) {\n            // Handle error\n            _this.setState(_objectSpread({}, _this.state, {\n              isFetching: false,\n              startTime: 0\n            }));\n          });\n        }\n\n        console.log(res);\n      }).catch(function (err) {\n        // Handle error\n        _this.setState(_objectSpread({}, _this.state, {\n          isFetching: false,\n          startTime: 0\n        }));\n      });\n    };\n\n    _this.updateMovieStatus = function (newTime) {\n      var _this$state = _this.state,\n          statusId = _this$state.statusId,\n          isFetching = _this$state.isFetching;\n      if (statusId === -1 || isFetching) return;\n\n      _this.setState(_objectSpread({}, _this.state, {\n        isFetching: true\n      }));\n\n      req(host + '/api/movie_statuses/' + statusId, {\n        method: 'PUT',\n        body: {\n          time: parseInt(newTime)\n        },\n        useToken: true\n      }).then(function (res) {\n        _this.setState(_objectSpread({}, _this.state, {\n          isFetching: false\n        }));\n      }).catch(function (err) {\n        // Handle error\n        _this.setState(_objectSpread({}, _this.state, {\n          isFetching: false\n        }));\n      });\n    };\n\n    _this.fetchSubtitles = function (id) {\n      req(host + '/api/movies/subtitles/' + id).catch(function (err) {// Handle error\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Stream, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var params = this.props.match.params;\n      this.fetchStream(params.id);\n      this.fetchSubtitles(params.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var startTime = this.state.startTime;\n      var params = this.props.match.params;\n      if (startTime === undefined) return null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        style: {\n          marginBottom: '15px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.state.name), React.createElement(Player, {\n        mediaUrl: \"https://hypertube.barthonet.ovh/api/movies/file/\" + params.id,\n        startTime: startTime,\n        onChange: this.updateMovieStatus,\n        movieId: params.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        id: params.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Stream;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps)(Stream);","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/components/stream/Stream.jsx"],"names":["React","Component","connect","req","Typography","host","Player","Comments","Stream","state","isFetching","startTime","undefined","statusId","name","fetchStream","id","setState","userId","props","auth","user","useToken","then","res","length","console","log","movie","time","method","body","catch","err","updateMovieStatus","newTime","parseInt","fetchSubtitles","params","match","marginBottom","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport req from '../../utils/req'\nimport { Typography} from '@material-ui/core'\nimport host from '../../config'\nimport Player from '../player/Player'\nimport Comments from '../comments/Comments';\n\nclass Stream extends Component {\n\n  state = {\n    isFetching: false,\n    startTime: undefined,\n    statusId: -1,\n    name: ''\n  }\n\n  fetchStream = (id) => {\n    this.setState({\n      ...this.state,\n      isFetching: true\n    })\n    let userId = this.props.auth.user.id\n    req(host + '/api/movie_statuses.json?movie.id=' + id + \"&user.id=\" + userId, {\n      useToken: true\n    }).then(res => {\n      if (res.length === 1) {\n        console.log(res.movie)\n        this.setState({\n          isFetching: false,\n          startTime: res[0].time,\n          statusId: res[0].id,\n          name: res.movie.name\n        })\n      } else {\n        req(host + '/api/movie_statuses', {\n          method: 'POST',\n          body: {\n            time: 0,\n            user: '/api/users/' + userId,\n            movie: '/api/movies/' + id\n          },\n          useToken: true\n        }).then(res => {\n          this.setState({\n            isFetching: false,\n            startTime: 0,\n            statusId: res.id\n          })\n        }).catch(err => {\n          // Handle error\n          this.setState({\n            ...this.state,\n            isFetching: false,\n            startTime: 0\n          })\n        })\n      }\n      console.log(res)\n    }).catch(err => {\n      // Handle error\n      this.setState({\n        ...this.state,\n        isFetching: false,\n        startTime: 0\n      })\n    })\n  }\n\n  updateMovieStatus = newTime => {\n    const { statusId, isFetching } = this.state\n    if (statusId === -1 || isFetching) return\n    this.setState({\n      ...this.state,\n      isFetching: true\n    })\n    req(host + '/api/movie_statuses/' + statusId, {\n      method: 'PUT',\n      body: {\n        time: parseInt(newTime)\n      },\n      useToken: true\n    }).then(res => {\n      this.setState({\n        ...this.state,\n        isFetching: false\n      })\n    }).catch(err => {\n      // Handle error\n      this.setState({\n        ...this.state,\n        isFetching: false\n      })\n    })\n  }\n\n  fetchSubtitles = id => {\n    req(host + '/api/movies/subtitles/' + id)\n    .catch(err => {\n      // Handle error\n    })\n  }\n\n  componentWillMount() {\n    const { params } = this.props.match;\n    this.fetchStream(params.id)\n    this.fetchSubtitles(params.id)\n  }\n\n  render() {\n    const { startTime } = this.state\n    const { params } = this.props.match\n    if (startTime === undefined) return null\n    return (\n      <div>\n        <Typography variant=\"h5\" style={{marginBottom:'15px'}}>{this.state.name}</Typography>\n        <Player mediaUrl={\"https://hypertube.barthonet.ovh/api/movies/file/\" + params.id}\n            startTime={startTime}\n            onChange={this.updateMovieStatus}\n            movieId={params.id}\n            />\n        <Comments id={params.id} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { return state }\n\nexport default connect(mapStateToProps)(Stream)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/korlandi/42/hypertube/src/components/comments/Comments.jsx\";\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport Loading from '../../utils/jsx/Loading';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport req from '../../utils/req';\nimport host from '../../config';\nimport CommentsBox from './CommentsBox';\n\nvar Comments =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Comments, _React$Component);\n\n  function Comments() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Comments);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Comments)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isFetching: false,\n      comments: []\n    };\n\n    _this.fetchComments = function (id) {\n      _this.setState(_objectSpread({}, _this.state, {\n        isFetching: true\n      }), function () {\n        req(host + '/api/movies/' + id + '/messages', {\n          useToken: true\n        }).then(function (res) {\n          console.log(res);\n\n          _this.setState({\n            isFetching: false,\n            comments: res['hydra:member']\n          }); //dispatch les comments \n\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Comments, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.fetchComments(this.props.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isFetching = _this$state.isFetching,\n          comments = _this$state.comments; // const { classes } = this.props\n      // const { locale } = this.props.locales\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(CommentsBox, {\n        id: this.props.id,\n        fetchComments: this.fetchComments,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Loading, {\n        display: isFetching,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, comments.map(function (comment) {\n        return React.createElement(ListItem, {\n          key: comment.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(ListItemText, {\n          primary: comment.owner.username,\n          secondary: comment.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Comments;\n}(React.Component);\n\nvar styles = function styles(theme) {\n  return {\n    img: {\n      borderRadius: '5px',\n      overflow: 'hidden'\n    },\n    paper: {\n      background: theme.palette.secondary.dark,\n      height: '100%',\n      borderRadius: '5px',\n      padding: '15px 20px',\n      overflow: 'hidden'\n    },\n    frame: {\n      margin: '0 -20px -19px -20px',\n      width: 'calc(100% + 40px)',\n      height: '20vw',\n      minHeight: '250px'\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nvar CommentsExport = Comments;\nCommentsExport = withStyles(styles)(CommentsExport);\nCommentsExport = connect(mapStateToProps)(CommentsExport);\nexport default CommentsExport;","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/components/comments/Comments.jsx"],"names":["React","withStyles","connect","Loading","List","ListItem","ListItemText","req","host","CommentsBox","Comments","state","isFetching","comments","fetchComments","id","setState","useToken","then","res","console","log","props","map","comment","owner","username","message","Component","styles","theme","img","borderRadius","overflow","paper","background","palette","secondary","dark","height","padding","frame","margin","width","minHeight","mapStateToProps","CommentsExport"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,Q;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE,KADN;AAENC,MAAAA,QAAQ,EAAE;AAFJ,K;;UAKRC,a,GAAgB,UAACC,EAAD,EAAQ;AACtB,YAAKC,QAAL,mBAAkB,MAAKL,KAAvB;AAA8BC,QAAAA,UAAU,EAAE;AAA1C,UAAiD,YAAM;AACrDL,QAAAA,GAAG,CAACC,IAAI,GAAG,cAAP,GAAwBO,EAAxB,GAA6B,WAA9B,EAA2C;AAACE,UAAAA,QAAQ,EAAE;AAAX,SAA3C,CAAH,CACDC,IADC,CACI,UAAAC,GAAG,EAAI;AACRC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACD,gBAAKH,QAAL,CAAc;AACVJ,YAAAA,UAAU,EAAE,KADF;AAEVC,YAAAA,QAAQ,EAAEM,GAAG,CAAC,cAAD;AAFH,WAAd,EAFS,CAMT;;AACH,SARC;AASD,OAVD;AAWD,K;;;;;;;yCAEoB;AACnB,WAAKL,aAAL,CAAmB,KAAKQ,KAAL,CAAWP,EAA9B;AACD;;;6BAEQ;AAAA,wBAC0B,KAAKJ,KAD/B;AAAA,UACCC,UADD,eACCA,UADD;AAAA,UACaC,QADb,eACaA,QADb,EAEP;AACA;;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAa,QAAA,EAAE,EAAE,KAAKS,KAAL,CAAWP,EAA5B;AAAgC,QAAA,aAAa,EAAE,KAAKD,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAEF,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCC,QAAQ,CAACU,GAAT,CAAa,UAAAC,OAAO,EAAI;AACrB,eACI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,OAAO,CAACT,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAII,oBAAC,YAAD;AACI,UAAA,OAAO,EAAES,OAAO,CAACC,KAAR,CAAcC,QAD3B;AAEI,UAAA,SAAS,EAAEF,OAAO,CAACG,OAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJJ,CADJ;AAYH,OAbA,CADD,CAHF,CADF;AAsBD;;;;EApDoB3B,KAAK,CAAC4B,S;;AAuD7B,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACvBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,YAAY,EAAC,KADV;AAEHC,MAAAA,QAAQ,EAAC;AAFN,KADkB;AAKvBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEL,KAAK,CAACM,OAAN,CAAcC,SAAd,CAAwBC,IAD/B;AAELC,MAAAA,MAAM,EAAC,MAFF;AAGLP,MAAAA,YAAY,EAAE,KAHT;AAILQ,MAAAA,OAAO,EAAC,WAJH;AAKLP,MAAAA,QAAQ,EAAC;AALJ,KALgB;AAYvBQ,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,qBADH;AAELC,MAAAA,KAAK,EAAE,mBAFF;AAGLJ,MAAAA,MAAM,EAAE,MAHH;AAILK,MAAAA,SAAS,EAAE;AAJN;AAZgB,GAAL;AAAA,CAApB;;AAmBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAlC,KAAK,EAAI;AAAE,SAAOA,KAAP;AAAc,CAAjD;;AACA,IAAImC,cAAc,GAAGpC,QAArB;AACAoC,cAAc,GAAG7C,UAAU,CAAC4B,MAAD,CAAV,CAAmBiB,cAAnB,CAAjB;AACAA,cAAc,GAAG5C,OAAO,CAAC2C,eAAD,CAAP,CAAyBC,cAAzB,CAAjB;AACA,eAAeA,cAAf","sourcesContent":["import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { connect } from 'react-redux'\nimport Loading from '../../utils/jsx/Loading'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport req from '../../utils/req'\nimport host from '../../config'\nimport CommentsBox from './CommentsBox'\n\nclass Comments extends React.Component {\n\n  state = {\n    isFetching: false,\n    comments: []\n  }\n\n  fetchComments = (id) => {\n    this.setState({...this.state, isFetching: true}, () => {\n      req(host + '/api/movies/' + id + '/messages', {useToken: true})\n    .then(res => {\n         console.log(res);\n        this.setState({\n            isFetching: false,\n            comments: res['hydra:member']\n        })\n        //dispatch les comments \n    })\n    })\n  }\n\n  componentWillMount() {\n    this.fetchComments(this.props.id)\n  }\n\n  render() {\n    const { isFetching, comments } = this.state\n    // const { classes } = this.props\n    // const { locale } = this.props.locales\n\n    return (\n      <div>\n        <CommentsBox id={this.props.id} fetchComments={this.fetchComments}/>\n        <Loading display={isFetching}/>\n        <List>\n        {comments.map(comment => {\n            return (\n                <ListItem key={comment.id}>\n                    {/* <ListItemAvatar>\n                        <Avatar src=\"/static/images/avatar/2.jpg\" />\n                    </ListItemAvatar> */}\n                    <ListItemText\n                        primary={comment.owner.username}\n                        secondary={comment.message}\n                    >\n                    </ListItemText>\n                </ListItem>\n            )\n        })}\n        </List>\n      </div>\n    )\n  }\n}\n\nconst styles = theme => ({\n  img: {\n    borderRadius:'5px',\n    overflow:'hidden'\n  },\n  paper: {\n    background: theme.palette.secondary.dark,\n    height:'100%',\n    borderRadius: '5px',\n    padding:'15px 20px',\n    overflow:'hidden'\n  },\n  frame: {\n    margin: '0 -20px -19px -20px',\n    width: 'calc(100% + 40px)',\n    height: '20vw',\n    minHeight: '250px'\n  }\n})\nconst mapStateToProps = state => { return state }\nlet CommentsExport = Comments\nCommentsExport = withStyles(styles)(CommentsExport)\nCommentsExport = connect(mapStateToProps)(CommentsExport)\nexport default CommentsExport\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/korlandi/42/hypertube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/korlandi/42/hypertube/src/components/search/Sort.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Grid, Button, Menu, MenuItem } from '@material-ui/core';\nimport { fetchMovies } from '../../redux/search/actions';\n\nvar Sort =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sort, _Component);\n\n  function Sort() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sort);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sort)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      anchorGenres: null,\n      anchorSorts: null,\n      anchorAPIs: null\n    };\n\n    _this.openGenres = function (e) {\n      _this.setState(_objectSpread({}, _this.state, {\n        anchorGenres: e.currentTarget\n      }));\n    };\n\n    _this.openSorts = function (e) {\n      _this.setState(_objectSpread({}, _this.state, {\n        anchorSorts: e.currentTarget\n      }));\n    };\n\n    _this.openAPIs = function (e) {\n      _this.setState(_objectSpread({}, _this.state, {\n        anchorAPIs: e.currentTarget\n      }));\n    };\n\n    _this.closeMenu = function () {\n      _this.setState({\n        anchorGenres: null,\n        anchorSorts: null,\n        anchorAPIs: null\n      });\n    };\n\n    _this.selectGenre = function (genre) {\n      var _this$props = _this.props,\n          dispatch = _this$props.dispatch,\n          search = _this$props.search;\n\n      _this.closeMenu();\n\n      if (genre === 'none') genre = '';\n      if (genre !== search.genre) dispatch(fetchMovies({\n        genre: genre\n      }));\n    };\n\n    _this.selectSort = function (sort) {\n      var _this$props2 = _this.props,\n          dispatch = _this$props2.dispatch,\n          search = _this$props2.search;\n\n      _this.closeMenu();\n\n      if (sort === 'none') sort = '';\n      if (sort !== search.sort) dispatch(fetchMovies({\n        sort: sort\n      }));\n    };\n\n    _this.selectAPI = function (api) {\n      var _this$props3 = _this.props,\n          dispatch = _this$props3.dispatch,\n          search = _this$props3.search;\n\n      _this.closeMenu();\n\n      if (api !== search.api) dispatch(fetchMovies({\n        api: api\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(Sort, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var genres = ['none', 'action', 'adventure', 'animation', 'comedy', 'crime', 'documentary', 'drama', 'family', 'fantasy', 'film-noir', 'history', 'horror', 'music', 'mystery', 'sports', 'romance', 'science-fiction', 'thriller', 'war', 'western', 'biography', 'musical'];\n      var sorts = ['none', 'rating', 'year', 'title'];\n      var _this$state = this.state,\n          anchorGenres = _this$state.anchorGenres,\n          anchorSorts = _this$state.anchorSorts,\n          anchorAPIs = _this$state.anchorAPIs;\n      var locale = this.props.locales.locale;\n      var search = this.props.search;\n      return React.createElement(Grid, {\n        container: true,\n        spacing: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: search.genre ? 'primary' : 'default',\n        onClick: this.openGenres,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, search.genre ? locale.genres[search.genre] : 'Genre'), React.createElement(Menu, {\n        anchorEl: anchorGenres,\n        open: Boolean(anchorGenres),\n        onClose: this.closeMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, genres.map(function (genre) {\n        return React.createElement(MenuItem, {\n          key: genre,\n          onClick: function onClick() {\n            return _this2.selectGenre(genre);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, locale.genres[genre]);\n      }))), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: search.sort ? 'primary' : 'default',\n        onClick: this.openSorts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, search.sort ? locale.sort[search.sort] : locale.sort.sort), React.createElement(Menu, {\n        anchorEl: anchorSorts,\n        open: Boolean(anchorSorts),\n        onClose: this.closeMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, sorts.map(function (sort) {\n        return React.createElement(MenuItem, {\n          key: sort,\n          onClick: function onClick() {\n            return _this2.selectSort(sort);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, locale.sort[sort]);\n      }))), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.openAPIs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, 'API : ' + search.api), React.createElement(Menu, {\n        anchorEl: anchorAPIs,\n        open: Boolean(anchorAPIs),\n        onClose: this.closeMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        onClick: function onClick() {\n          return _this2.selectAPI('yts');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"YTS\"), React.createElement(MenuItem, {\n        onClick: function onClick() {\n          return _this2.selectAPI('popcorntime');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"popcorntime\"))));\n    }\n  }]);\n\n  return Sort;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nvar SortExport = Sort;\nSortExport = connect(mapStateToProps)(SortExport);\nexport default SortExport;","map":{"version":3,"sources":["/Users/korlandi/42/hypertube/src/components/search/Sort.jsx"],"names":["React","Component","connect","Grid","Button","Menu","MenuItem","fetchMovies","Sort","state","anchorGenres","anchorSorts","anchorAPIs","openGenres","e","setState","currentTarget","openSorts","openAPIs","closeMenu","selectGenre","genre","props","dispatch","search","selectSort","sort","selectAPI","api","genres","sorts","locale","locales","Boolean","map","mapStateToProps","SortExport"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Grid, Button, Menu, MenuItem } from '@material-ui/core'\nimport { fetchMovies } from '../../redux/search/actions'\n\nclass Sort extends Component {\n\n  state = {\n    anchorGenres: null,\n    anchorSorts: null,\n    anchorAPIs: null,\n  }\n\n  openGenres = (e) => {\n    this.setState({ ...this.state, anchorGenres: e.currentTarget });\n  }\n\n  openSorts = (e) => {\n    this.setState({ ...this.state, anchorSorts: e.currentTarget });\n  }\n\n  openAPIs = (e) => {\n    this.setState({ ...this.state, anchorAPIs: e.currentTarget });\n  }\n\n  closeMenu = () => {\n    this.setState({ anchorGenres: null, anchorSorts: null, anchorAPIs: null });\n  }\n\n  selectGenre = (genre) => {\n    const { dispatch, search } = this.props\n\n    this.closeMenu()\n    if (genre === 'none')\n      genre = ''\n    if (genre !== search.genre)\n      dispatch(fetchMovies({genre}))\n  }\n\n  selectSort = (sort) => {\n    const { dispatch, search } = this.props\n\n    this.closeMenu()\n    if (sort === 'none')\n      sort = ''\n    if (sort !== search.sort)\n      dispatch(fetchMovies({sort}))\n  }\n\n  selectAPI = (api) => {\n    const { dispatch, search } = this.props\n\n    this.closeMenu()\n    if (api !== search.api)\n      dispatch(fetchMovies({api}))\n  }\n\n  render() {\n    const genres = ['none', 'action', 'adventure', 'animation', 'comedy', 'crime',\n      'documentary', 'drama', 'family', 'fantasy', 'film-noir', 'history', 'horror',\n      'music', 'mystery', 'sports', 'romance', 'science-fiction', 'thriller',\n      'war', 'western', 'biography', 'musical']\n    const sorts = ['none', 'rating', 'year', 'title']\n    const { anchorGenres, anchorSorts, anchorAPIs } = this.state\n    const { locale } = this.props.locales\n    const { search } = this.props\n    return (\n      <Grid container spacing={8}>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            color={search.genre ? 'primary' : 'default'}\n            onClick={this.openGenres}\n          >\n             {search.genre ? locale.genres[search.genre] : 'Genre'}\n          </Button>\n          <Menu\n            anchorEl={anchorGenres}\n            open={Boolean(anchorGenres)}\n            onClose={this.closeMenu}\n          >\n           {genres.map(genre => {\n             return <MenuItem key={genre} onClick={() => this.selectGenre(genre)}>{locale.genres[genre]}</MenuItem>\n           })}\n          </Menu>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            color={search.sort ? 'primary' : 'default'}\n            onClick={this.openSorts}\n          >\n            {search.sort ? locale.sort[search.sort] : locale.sort.sort}\n          </Button>\n          <Menu\n            anchorEl={anchorSorts}\n            open={Boolean(anchorSorts)}\n            onClose={this.closeMenu}\n          >\n           {sorts.map(sort => {\n             return <MenuItem key={sort} onClick={() => this.selectSort(sort)}>{locale.sort[sort]}</MenuItem>\n           })}\n          </Menu>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={this.openAPIs}\n          >\n            {'API : ' + search.api}\n          </Button>\n          <Menu\n            anchorEl={anchorAPIs}\n            open={Boolean(anchorAPIs)}\n            onClose={this.closeMenu}\n          >\n            <MenuItem onClick={() => this.selectAPI('yts')}>YTS</MenuItem>\n            <MenuItem onClick={() => this.selectAPI('popcorntime')}>popcorntime</MenuItem>\n          </Menu>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nconst mapStateToProps = state => { return state }\nlet SortExport = Sort\nSortExport = connect(mapStateToProps)(SortExport)\n\nexport default SortExport\n"]},"metadata":{},"sourceType":"module"}